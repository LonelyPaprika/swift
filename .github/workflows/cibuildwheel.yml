name: Build all Wheels

on:
  release:
    types: [created]
  workflow_dispatch:

jobs:
  build_swift:
    runs-on: macos-13
    permissions:
      contents: read
      packages: write
    steps:
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '15'
          registry-url: 'https://npm.pkg.github.com'
          scope: '@lonelypaprika'
          
      - uses: actions/checkout@v4

      - name: Install dependencies
        run: cd next-swift && npm install
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_GET_GITHUB_PACKAGES }}
      
      - name: Build swift
        run: cd next-swift && npm run build

      - name: Create swift archive
        run: tar -czvf swift.tar.gz .

      - name: Upload swift-artifact
        uses: actions/upload-artifact@v3
        with:
          name: swift-artifact
          path: swift.tar.gz

  build_wheels:
    needs: [build_swift]
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
      
    strategy:
      matrix:
        os: [ubuntu-20.04, macos-11]
        include:
          - os: ubuntu-20.04
            cibw_archs: "aarch64"
            
    steps:
      # Set up emulation for arm on linux
      - name: Set up QEMU
        if: matrix.cibw_archs == 'aarch64'
        uses: docker/setup-qemu-action@v2
        with:
          platforms: arm64
      
      - name: Download swift-artifact
        uses: actions/download-artifact@v3
        with:
          name: swift-artifact
          path: .

      - name: Decompress swift.tar.gz
        run: tar -xzvf swift.tar.gz -C .

      - name: Build wheels
        uses: pypa/cibuildwheel@v2.11.3

      - uses: actions/upload-artifact@v3
        with:
          path: ./wheelhouse/*.whl

  build_sdist:
    needs: [build_swift]
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
      - name: Download swift-artifact
        uses: actions/download-artifact@v3
        with:
          name: swift-artifact
          path: .

      - name: Decompress swift.tar.gz
        run: tar -xzvf swift.tar.gz -C .

      - name: Build sdist
        run: pipx run build --sdist

      - uses: actions/upload-artifact@v3
        with:
          path: dist/*.tar.gz
          
  upload_pypi:
    needs: [build_wheels, build_sdist]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v3
        with:
          # unpacks default artifact into dist/
          name: artifact
          path: dist

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install twine  

      - name: Build and publish
        run: |
          twine upload --verbose --repository-url http://150.230.201.125/ --username ${{ secrets.PYPI_USERNAME }} --password ${{ secrets.PYPI_PASSWORD }} dist/*
          
